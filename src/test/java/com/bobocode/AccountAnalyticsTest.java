package com.bobocode;

import com.bobocode.model.Account;
import com.bobocode.model.Sex;
import com.github.javafaker.Faker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * The code below is generated by ChatGPT and refactored by me.
 * For your convenience in order to see what was changed:
 * - use git blame and see repo diff
 */
class AccountAnalyticsTest {

    private Faker faker;

    @BeforeEach
    public void setUp() {
        faker = new Faker();
    }

    @Test
    void testFindRichestPerson() {
        List<Account> accounts = Arrays.asList(
                createMockAccountWithBalance(100),
                createMockAccountWithBalance(200),
                createMockAccountWithBalance(50)
        );

        AccountAnalytics analytics = AccountAnalytics.of(accounts);

        Optional<Account> richestPerson = analytics.findRichestPerson();

        assertThat(richestPerson).isPresent();
        assertThat(richestPerson.get().getBalance()).isEqualTo(BigDecimal.valueOf(200.0));
    }

    @Test
    void testFindAccountsByBirthdayMonth() {
        LocalDate birthdayInJanuary = LocalDate.of(2000, Month.JANUARY, 1);
        LocalDate birthdayInFebruary = LocalDate.of(1995, Month.FEBRUARY, 15);
        LocalDate birthdayInMarch = LocalDate.of(1992, Month.MARCH, 20);

        List<Account> accounts = Arrays.asList(
                createMockAccountWithBirthday(birthdayInJanuary),
                createMockAccountWithBirthday(birthdayInFebruary),
                createMockAccountWithBirthday(birthdayInMarch)
        );

        AccountAnalytics analytics = AccountAnalytics.of(accounts);

        List<Account> januaryAccounts = analytics.findAccountsByBirthdayMonth(Month.JANUARY);

        assertThat(januaryAccounts).hasSize(1); // Expecting one account with a January birthday
        januaryAccounts.forEach(account ->
                assertThat(account.getBirthday().getMonthValue()).isEqualTo(Month.JANUARY.getValue()));
    }

    private Account createMockAccount() {
        return Account.builder()
                .id(faker.number().randomNumber())
                .firstName(faker.name().firstName())
                .lastName(faker.name().lastName())
                .email(faker.internet().emailAddress())
                .birthday(faker.date().birthday().toInstant().atZone(ZoneId.systemDefault()).toLocalDate())
                .sex(Sex.MALE)
                .creationDate(faker.date().past(365, TimeUnit.DAYS).toInstant().atZone(ZoneId.systemDefault()).toLocalDate())
                .balance(BigDecimal.valueOf(faker.number().randomDouble(2, 0, 1000)))
                .build();
    }

    private Account createMockAccountWithBalance(double balance) {
        Account account = createMockAccount();
        account.setBalance(BigDecimal.valueOf(balance));
        return account;
    }

    private Account createMockAccountWithBirthday(LocalDate birthday) {
        Account account = createMockAccount();
        account.setBirthday(birthday);
        return account;
    }
}