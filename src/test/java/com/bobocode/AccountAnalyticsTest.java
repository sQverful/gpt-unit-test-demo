import com.github.javafaker.Faker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Month;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

/**
 * The code below is fully generated by ChatGPT
 * No changes were made by me, that's why code is faulty.
 */

public class AccountAnalyticsTest {

    private AccountAnalytics accountAnalytics;
    private Faker faker;

    @BeforeEach
    public void setUp() {
        // Initialize the Faker library
        faker = new Faker();

        // Create a list of mock Account objects with random data
        List<Account> mockAccounts = Stream.generate(() -> createMockAccount())
                .limit(10) // You can change the number of accounts as needed
                .collect(Collectors.toList());

        // Create an instance of AccountAnalytics with the mock accounts
        accountAnalytics = AccountAnalytics.of(mockAccounts);
    }

    @Test
    public void testFindRichestPerson() {
        // Arrange: Create a list of mock accounts with known balances
        List<Account> accounts = Arrays.asList(
                createMockAccountWithBalance(100),
                createMockAccountWithBalance(200),
                createMockAccountWithBalance(50)
        );

        // Create an instance of AccountAnalytics with the mock accounts
        AccountAnalytics analytics = AccountAnalytics.of(accounts);

        // Act: Call the findRichestPerson method
        Optional<Account> richestPerson = analytics.findRichestPerson();

        // Assert: Ensure that the richest person is correctly identified
        assertThat(richestPerson).isPresent();
        assertThat(richestPerson.get().getBalance()).isEqualTo(BigDecimal.valueOf(200));
    }

    @Test
    public void testFindAccountsByBirthdayMonth() {
        // Arrange: Create a list of mock accounts with known birthday months
        LocalDate birthdayInJanuary = LocalDate.of(2000, Month.JANUARY, 1);
        LocalDate birthdayInFebruary = LocalDate.of(1995, Month.FEBRUARY, 15);
        LocalDate birthdayInMarch = LocalDate.of(1992, Month.MARCH, 20);

        List<Account> accounts = Arrays.asList(
                createMockAccountWithBirthday(birthdayInJanuary),
                createMockAccountWithBirthday(birthdayInFebruary),
                createMockAccountWithBirthday(birthdayInMarch)
        );

        // Create an instance of AccountAnalytics with the mock accounts
        AccountAnalytics analytics = AccountAnalytics.of(accounts);

        // Act: Call the findAccountsByBirthdayMonth method with a specific month
        List<Account> januaryAccounts = analytics.findAccountsByBirthdayMonth(Month.JANUARY);

        // Assert: Ensure that the correct accounts are returned
        assertThat(januaryAccounts).hasSize(1); // Expecting one account with a January birthday
    }

    // Helper method to create a mock Account with random values
    private Account createMockAccount() {
        return new Account.Builder()
                .id(faker.number().randomNumber())
                .firstName(faker.name().firstName())
                .lastName(faker.name().lastName())
                .email(faker.internet().emailAddress())
                .birthday(faker.date().birthday().toInstant().atZone(ZoneId.systemDefault()).toLocalDate())
                .sex(Sex.MALE) // You can use faker to generate this randomly if needed
                .creationDate(faker.date().past(365, TimeUnit.DAYS).toInstant().atZone(ZoneId.systemDefault()).toLocalDate())
                .balance(faker.number().randomDouble(2, 0, 1000))
                .build();
    }

    // Helper method to create a mock Account with a specified balance
    private Account createMockAccountWithBalance(double balance) {
        Account account = createMockAccount();
        account.setBalance(BigDecimal.valueOf(balance));
        return account;
    }

    // Helper method to create a mock Account with a specified birthday
    private Account createMockAccountWithBirthday(LocalDate birthday) {
        Account account = createMockAccount();
        account.setBirthday(birthday);
        return account;
    }
}